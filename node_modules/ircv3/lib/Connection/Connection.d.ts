/// <reference types="node" />
import { EventEmitter } from 'events';
export interface ConnectionInfo {
    hostName: string;
    port?: number;
    nick: string;
    password?: string;
    userName?: string;
    realName?: string;
    secure?: boolean;
    reconnect?: boolean;
    pingOnInactivity?: number;
    pingTimeout?: number;
}
declare abstract class Connection extends EventEmitter {
    protected _host: string;
    protected _port?: number;
    protected _secure: boolean;
    protected _connecting: boolean;
    protected _connected: boolean;
    protected _initialConnection: boolean;
    protected _shouldReconnect: boolean;
    protected _manualDisconnect: boolean;
    private _currentLine;
    abstract connect(): Promise<void>;
    abstract disconnect(): void;
    protected abstract sendRaw(line: string): void;
    abstract readonly port: number;
    constructor({ hostName, port, secure, reconnect }: ConnectionInfo);
    protected _handleReconnect(error?: Error): void;
    sendLine(line: string): void;
    receiveRaw(data: string): void;
    readonly isConnecting: boolean;
    readonly isConnected: boolean;
    readonly host: string;
}
export default Connection;
