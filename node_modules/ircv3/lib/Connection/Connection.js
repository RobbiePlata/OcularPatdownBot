"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var events_1 = require("events");
var Connection = /** @class */ (function (_super) {
    __extends(Connection, _super);
    function Connection(_a) {
        var hostName = _a.hostName, port = _a.port, secure = _a.secure, _b = _a.reconnect, reconnect = _b === void 0 ? true : _b;
        var _this = _super.call(this) || this;
        _this._connecting = false;
        _this._connected = false;
        _this._initialConnection = true;
        _this._shouldReconnect = true;
        _this._manualDisconnect = false;
        _this._currentLine = '';
        _this._secure = Boolean(secure);
        if (port) {
            _this._host = hostName;
            _this._port = port;
        }
        else {
            var splitHost = hostName.split(':');
            if (splitHost.length > 2) {
                throw new Error('malformed hostName');
            }
            var _c = __read(splitHost, 2), host = _c[0], splitPort = _c[1];
            _this._host = host;
            if (splitPort) {
                _this._port = Number(splitPort);
            }
        }
        _this._shouldReconnect = reconnect;
        return _this;
    }
    Connection.prototype._handleReconnect = function (error) {
        if (this._manualDisconnect) {
            this._manualDisconnect = false;
        }
        else if (error && this._shouldReconnect) {
            // tslint:disable-next-line:no-floating-promises
            this.connect();
        }
    };
    Connection.prototype.sendLine = function (line) {
        if (this._connected) {
            line = line.replace(/[\0\r\n]/g, '');
            this.sendRaw(line + "\r\n");
        }
    };
    Connection.prototype.receiveRaw = function (data) {
        var e_1, _a;
        var receivedLines = data.split('\r\n');
        this._currentLine += receivedLines.shift() || '';
        if (receivedLines.length) {
            this.emit('lineReceived', this._currentLine);
            this._currentLine = receivedLines.pop() || '';
            try {
                for (var receivedLines_1 = __values(receivedLines), receivedLines_1_1 = receivedLines_1.next(); !receivedLines_1_1.done; receivedLines_1_1 = receivedLines_1.next()) {
                    var line = receivedLines_1_1.value;
                    this.emit('lineReceived', line);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (receivedLines_1_1 && !receivedLines_1_1.done && (_a = receivedLines_1.return)) _a.call(receivedLines_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
    };
    Object.defineProperty(Connection.prototype, "isConnecting", {
        get: function () {
            return this._connecting;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Connection.prototype, "isConnected", {
        get: function () {
            return this._connected;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Connection.prototype, "host", {
        get: function () {
            return this._host;
        },
        enumerable: true,
        configurable: true
    });
    return Connection;
}(events_1.EventEmitter));
exports.default = Connection;
//# sourceMappingURL=Connection.js.map