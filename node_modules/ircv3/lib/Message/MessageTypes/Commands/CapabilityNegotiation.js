"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Message_1 = require("../../Message");
var CapabilityNegotiation = /** @class */ (function (_super) {
    __extends(CapabilityNegotiation, _super);
    function CapabilityNegotiation() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CapabilityNegotiation.prototype.isResponseTo = function (originalMessage) {
        if (!(originalMessage instanceof CapabilityNegotiation)) {
            return false;
        }
        switch (this.params.command) {
            case 'ACK':
            case 'NAK': {
                // trim is necessary because some networks seem to add trailing spaces (looking at you, Freenode)...
                return originalMessage.params.command === 'REQ'
                    && originalMessage.params.capabilities === this.params.capabilities.trim();
            }
            case 'LS':
            case 'LIST': {
                return originalMessage.params.command === this.params.command;
            }
            default: {
                return false;
            }
        }
    };
    CapabilityNegotiation.prototype.endsResponseTo = function (originalMessage) {
        if (!(originalMessage instanceof CapabilityNegotiation)) {
            return false;
        }
        switch (this.params.command) {
            case 'LS':
            case 'LIST': {
                return !this.params.continued;
            }
            default: {
                return true;
            }
        }
    };
    CapabilityNegotiation.COMMAND = 'CAP';
    CapabilityNegotiation.PARAM_SPEC = {
        target: {
            match: /^(?:[a-z_\-\[\]\\^{}|`][a-z0-9_\-\[\]\\^{}|`]*|\*)$/i,
            optional: true
        },
        command: {
            match: /^(?:LS|LIST|REQ|ACK|NAK|END|NEW|DEL)$/i
        },
        version: {
            match: /^\d+$/,
            optional: true
        },
        continued: {
            match: /^\*$/,
            optional: true
        },
        capabilities: {
            trailing: true,
            optional: true
        }
    };
    CapabilityNegotiation.SUPPORTS_CAPTURE = true;
    return CapabilityNegotiation;
}(Message_1.default));
exports.default = CapabilityNegotiation;
//# sourceMappingURL=CapabilityNegotiation.js.map