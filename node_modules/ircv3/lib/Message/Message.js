"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var ObjectTools_1 = require("../Toolkit/ObjectTools");
var StringTools_1 = require("../Toolkit/StringTools");
var tagEscapeMap = {
    '\\': '\\',
    ':': ';',
    n: '\n',
    r: '\r',
    s: ' '
};
var Message = /** @class */ (function () {
    function Message(client, command, params, tags, prefix) {
        this._params = [];
        this._command = command;
        this._params = params;
        this._tags = tags;
        this._prefix = prefix;
        Object.defineProperty(this, '_client', {
            get: function () {
                return client;
            }
        });
        this.parseParams();
    }
    Message.parse = function (line, client) {
        var splitLine = line.split(' ');
        var token;
        var command;
        var params = [];
        var tags;
        var prefix;
        while (splitLine.length) {
            token = splitLine[0];
            if (token[0] === '@' && !tags && !command) {
                tags = Message.parseTags(token.substr(1));
            }
            else if (token[0] === ':') {
                if (!prefix && !command) {
                    prefix = Message.parsePrefix(token.substr(1));
                }
                else {
                    params.push({
                        value: splitLine.join(' ').substr(1),
                        trailing: true
                    });
                    break;
                }
            }
            else if (!command) {
                command = token.toUpperCase();
            }
            else {
                params.push({
                    value: token,
                    trailing: false
                });
            }
            splitLine.shift();
        }
        if (!command) {
            throw new Error("line without command received: " + line);
        }
        var message;
        var messageClass = Message;
        if (client.knowsCommand(command)) {
            messageClass = client.getCommandClass(command);
        }
        // tslint:disable-next-line:no-inferred-empty-object-type
        message = new messageClass(client, command, params, tags, prefix);
        message._raw = line;
        return message;
    };
    Message.parsePrefix = function (raw) {
        var _a = __read(raw.split('!', 2), 2), nick = _a[0], hostName = _a[1];
        if (hostName) {
            var _b = __read(hostName.split('@', 2), 2), user = _b[0], host = _b[1];
            if (host) {
                return { raw: raw, nick: nick, user: user, host: host };
            }
            else {
                return { raw: raw, nick: nick, host: user };
            }
        }
        else {
            return { raw: raw, nick: nick };
        }
    };
    Message.parseTags = function (raw) {
        var e_1, _a;
        var tags = new Map();
        var tagStrings = raw.split(';');
        try {
            for (var tagStrings_1 = __values(tagStrings), tagStrings_1_1 = tagStrings_1.next(); !tagStrings_1_1.done; tagStrings_1_1 = tagStrings_1.next()) {
                var tagString = tagStrings_1_1.value;
                var _b = __read(tagString.split('=', 2), 2), tagName = _b[0], tagValue = _b[1];
                // unescape according to http://ircv3.net/specs/core/message-tags-3.2.html#escaping-values
                tags.set(tagName, tagValue.replace(/\\([\\:nrs])/g, function (_, match) { return tagEscapeMap[match]; }));
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (tagStrings_1_1 && !tagStrings_1_1.done && (_a = tagStrings_1.return)) _a.call(tagStrings_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return tags;
    };
    Message.create = function (client, params) {
        var _this = this;
        var message = new this(client, this.COMMAND);
        var parsedParams = {};
        ObjectTools_1.default.forEach(this.PARAM_SPEC, function (paramSpec, paramName) {
            if (paramName in params) {
                var param = params[paramName];
                if (_this.checkParam(client, param, paramSpec)) {
                    parsedParams[paramName] = {
                        value: param,
                        trailing: Boolean(paramSpec.trailing)
                    };
                }
                else if (!paramSpec.optional) {
                    throw new Error("required parameter \"" + paramName + "\" did not suit requirements: \"" + param + "\"");
                }
            }
            if (!(paramName in parsedParams) && !paramSpec.optional) {
                throw new Error("required parameter \"" + paramName + "\" not found in command \"" + _this.COMMAND + "\"");
            }
        });
        message._parsedParams = parsedParams;
        return message;
    };
    Message.checkParam = function (client, param, spec) {
        if (spec.type === 'channel') {
            if (!StringTools_1.isChannel(param, client.channelTypes)) {
                return false;
            }
        }
        if (spec.match) {
            if (!spec.match.test(param)) {
                return false;
            }
        }
        return true;
    };
    Message.prototype.toString = function () {
        var _this = this;
        var cls = this.constructor;
        var specKeys = ObjectTools_1.default.keys(cls.PARAM_SPEC);
        return __spread([this._command], specKeys.map(function (paramName) {
            var param = _this._parsedParams[paramName];
            if (param) {
                return (param.trailing ? ':' : '') + param.value;
            }
        }).filter(function (param) { return param !== undefined; })).join(' ');
    };
    Message.prototype.parseParams = function () {
        var e_2, _a;
        if (this._params) {
            var cls = this.constructor;
            var requiredParamsLeft = cls.minParamCount;
            if (requiredParamsLeft > this._params.length) {
                throw new Error("command \"" + this._command + "\" expected " + requiredParamsLeft + " or more parameters, got " + this._params.length);
            }
            var paramSpecList = cls.PARAM_SPEC;
            var i = 0;
            var parsedParams = {};
            try {
                for (var _b = __values(Object.entries(paramSpecList)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var _d = __read(_c.value, 2), paramName = _d[0], paramSpec = _d[1];
                    if ((this._params.length - i) <= requiredParamsLeft) {
                        if (paramSpec.optional) {
                            continue;
                        }
                        else if (this._params.length - i !== requiredParamsLeft) {
                            throw new Error('not enough parameters left for required parameters parsing (this is a library bug)');
                        }
                    }
                    var param = this._params[i];
                    if (!param) {
                        if (paramSpec.optional) {
                            break;
                        }
                        throw new Error('unexpected parameter underflow');
                    }
                    if (paramSpec.rest) {
                        var restParams = [];
                        while (this._params[i] && !this._params[i].trailing) {
                            restParams.push(this._params[i].value);
                            ++i;
                        }
                        if (!restParams.length) {
                            if (paramSpec.optional) {
                                continue;
                            }
                            throw new Error("no parameters left for required rest parameter \"" + paramName + "\"");
                        }
                        param = {
                            value: restParams.join(' '),
                            trailing: false
                        };
                    }
                    if (this.checkParam(param.value, paramSpec)) {
                        parsedParams[paramName] = __assign({}, param);
                        if (!paramSpec.optional) {
                            --requiredParamsLeft;
                        }
                        if (!paramSpec.rest) {
                            ++i;
                        }
                    }
                    else if (!paramSpec.optional) {
                        throw new Error("required parameter \"" + paramName + "\" (index " + i + ") did not suit requirements: \"" + param.value + "\"");
                    }
                    if (paramSpec.trailing) {
                        break;
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
            this._parsedParams = parsedParams;
        }
    };
    Message.prototype.checkParam = function (param, spec) {
        var cls = this.constructor;
        return cls.checkParam(this._client, param, spec);
    };
    Object.defineProperty(Message, "minParamCount", {
        get: function () {
            return Object.values(this.PARAM_SPEC).filter(function (spec) { return !spec.optional; }).length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Message.prototype, "params", {
        get: function () {
            return ObjectTools_1.default.map(this._parsedParams, function (param) { return param.value; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Message.prototype, "prefix", {
        get: function () {
            return this._prefix && __assign({}, this._prefix);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Message.prototype, "command", {
        get: function () {
            return this._command;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Message.prototype, "tags", {
        get: function () {
            return new Map(this._tags || []);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Message.prototype, "rawLine", {
        get: function () {
            return this._raw;
        },
        enumerable: true,
        configurable: true
    });
    Message.prototype.send = function () {
        this._client.send(this);
    };
    Message.prototype.sendAndCaptureReply = function () {
        return __awaiter(this, void 0, void 0, function () {
            var cls, promise;
            return __generator(this, function (_a) {
                cls = this.constructor;
                if (!cls.SUPPORTS_CAPTURE) {
                    throw new Error("The command \"" + cls.COMMAND + "\" does not support reply capture");
                }
                promise = this._client.collect(this).promise();
                this.send();
                return [2 /*return*/, promise];
            });
        });
    };
    Message.prototype.isResponseTo = function (originalMessage) {
        return false;
    };
    Message.prototype.endsResponseTo = function (originalMessage) {
        return false;
    };
    Message.prototype._acceptsInReplyCollection = function (message) {
        // TODO implement IRCv3 labeled-response / batch here
        return message.isResponseTo(this);
    };
    Message.COMMAND = '';
    Message.PARAM_SPEC = {};
    //noinspection JSUnusedGlobalSymbols
    Message.SUPPORTS_CAPTURE = false;
    return Message;
}());
exports.default = Message;
//# sourceMappingURL=Message.js.map