import Client from '../Client';
import { MessageDataType } from '../Toolkit/TypeTools';
export declare type MessagePrefix = {
    raw: string;
    nick: string;
    user?: string;
    host?: string;
};
export interface MessageParam {
    value: string;
    trailing: boolean;
}
export interface MessageParamSpecEntry {
    trailing?: boolean;
    rest?: boolean;
    optional?: boolean;
    type?: 'channel';
    match?: RegExp;
}
export declare type MessageParamSpec<T extends Message = Message> = {
    [name in keyof MessageDataType<T>]: MessageParamSpecEntry;
};
export interface MessageConstructor<T extends Message = Message> {
    COMMAND: string;
    PARAM_SPEC: MessageParamSpec<T>;
    SUPPORTS_CAPTURE: boolean;
    minParamCount: number;
    new (client: Client, command: string, params?: MessageParam[], tags?: Map<string, string>, prefix?: MessagePrefix): T;
    create(this: MessageConstructor<T>, client: Client, params: {
        [name in keyof MessageDataType<T>]?: string;
    }): T;
    checkParam(client: Client, param: string, spec: MessageParamSpecEntry): boolean;
}
export default class Message<D extends {
    [name in keyof D]?: MessageParam;
} = {}> {
    static readonly COMMAND: string;
    static readonly PARAM_SPEC: {};
    static readonly SUPPORTS_CAPTURE: boolean;
    protected _tags?: Map<string, string>;
    protected _prefix?: MessagePrefix;
    protected _command: string;
    protected _params?: MessageParam[];
    protected _parsedParams: D;
    protected _client: Client;
    private _raw?;
    static parse(line: string, client: Client): Message;
    static parsePrefix(raw: string): MessagePrefix;
    static parseTags(raw: string): Map<string, string>;
    static create<T extends Message>(this: MessageConstructor<T>, client: Client, params: {
        [name in keyof MessageDataType<T>]?: string;
    }): T;
    static checkParam(client: Client, param: string, spec: MessageParamSpecEntry): boolean;
    toString(): string;
    constructor(client: Client, command: string, params?: MessageParam[], tags?: Map<string, string>, prefix?: MessagePrefix);
    parseParams(): void;
    checkParam(param: string, spec: MessageParamSpecEntry): boolean;
    static readonly minParamCount: number;
    readonly params: {
        [name in Extract<keyof D, string>]: string;
    };
    readonly prefix: MessagePrefix | undefined;
    readonly command: string;
    readonly tags: Map<string, string>;
    readonly rawLine: string | undefined;
    send(): void;
    sendAndCaptureReply(): Promise<Message[]>;
    protected isResponseTo(originalMessage: Message): boolean;
    endsResponseTo(originalMessage: Message): boolean;
    _acceptsInReplyCollection(message: Message): boolean;
}
