"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Decorators_1 = require("../Toolkit/Decorators");
/**
 * An auth provider that always returns the same initially given credentials.
 *
 * You are advised to roll your own auth provider that can handle scope upgrades,
 * or to plan ahead and supply only access tokens that account for all scopes
 * you will ever need (not recommended).
 */
var StaticAuthProvider = /** @class */ (function () {
    /**
     * Creates a new auth provider with static credentials.
     *
     * @param clientId The client ID.
     * @param accessToken The access token to provide.
     *
     * You need to obtain one using one of the [Twitch OAuth flows](https://dev.twitch.tv/docs/authentication/getting-tokens-oauth/).
     */
    function StaticAuthProvider(clientId, accessToken) {
        this._currentScopes = new Set();
        this._clientId = clientId || '';
        this._accessToken = accessToken || '';
    }
    /**
     * Retrieves an access token.
     *
     * If the current access token does not have the requested scopes, the current
     * token is returned anyway. This makes supplying an access token with the correct
     * scopes from the beginning necessary.
     *
     * @param scopes The requested scopes.
     */
    StaticAuthProvider.prototype.getAccessToken = function (scopes) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                if (typeof scopes === 'string') {
                    scopes = scopes.split(' ');
                }
                // we only get a static token, so we just hope it works...
                this._currentScopes = new Set(Array.from(this._currentScopes).concat(scopes));
                return [2 /*return*/, this._accessToken];
            });
        });
    };
    /** @private */
    StaticAuthProvider.prototype.setAccessToken = function (token) {
        this._accessToken = token;
    };
    Object.defineProperty(StaticAuthProvider.prototype, "clientId", {
        /**
         * The client ID.
         */
        get: function () {
            return this._clientId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StaticAuthProvider.prototype, "currentScopes", {
        /**
         * The scopes that are currently available using the access token.
         */
        get: function () {
            return Array.from(this._currentScopes);
        },
        enumerable: true,
        configurable: true
    });
    tslib_1.__decorate([
        Decorators_1.NonEnumerable
    ], StaticAuthProvider.prototype, "_clientId", void 0);
    tslib_1.__decorate([
        Decorators_1.NonEnumerable
    ], StaticAuthProvider.prototype, "_accessToken", void 0);
    return StaticAuthProvider;
}());
exports.default = StaticAuthProvider;
//# sourceMappingURL=StaticAuthProvider.js.map