import { UserIdResolvable } from '../../../Toolkit/UserTools';
import TwitchClient from '../../../TwitchClient';
/**
 * The type of a broadcaster.
 */
export declare enum HelixBroadcasterType {
    /**
     * A Twitch Partner.
     */
    Partner = "partner",
    /**
     * A Twitch Affiliate.
     */
    Affiliate = "affiliate",
    /**
     * A user that's neither a partner nor an affiliate.
     */
    None = ""
}
/**
 * The type of a user.
 */
export declare enum HelixUserType {
    /**
     * A Twitch staff member.
     */
    Staff = "staff",
    /**
     * A Twitch administrator.
     */
    Admin = "admin",
    /**
     * A global moderator.
     */
    GlobalMod = "global_mod",
    /**
     * A user with no special permissions across Twitch.
     */
    None = ""
}
/** @private */
export interface HelixUserData {
    id: string;
    login: string;
    display_name: string;
    description: string;
    type: HelixUserType;
    broadcaster_type: HelixBroadcasterType;
    profile_image_url: string;
    offline_image_url: string;
    view_count: number;
}
/**
 * A Twitch user/channel.
 */
export default class HelixUser {
    protected _data: HelixUserData;
    /** @private */
    protected readonly _client: TwitchClient;
    /** @private */
    constructor(/** @private */ _data: HelixUserData, client: TwitchClient);
    /** @private */
    readonly cacheKey: string;
    /**
     * The ID of the user.
     */
    readonly id: string;
    /**
     * The user name of the user.
     */
    readonly name: string;
    /**
     * The display name of the user.
     */
    readonly displayName: string;
    /**
     * The description of the user.
     */
    readonly description: string;
    /**
     * The type of the user.
     */
    readonly type: HelixUserType;
    /**
     * The type of the user.
     */
    readonly broadcasterType: HelixBroadcasterType;
    /**
     * The URL to the profile picture of the user.
     */
    readonly profilePictureUrl: string;
    /**
     * The URL to the offline video placeholder of the user.
     */
    readonly offlinePlaceholderUrl: string;
    /**
     * The total number of views of the channel.
     */
    readonly views: number;
    /**
     * Retrieves a list of channels the user follows.
     */
    getFollows(): import("../HelixPaginatedRequestWithTotal").default<import("./HelixFollow").HelixFollowData, import("./HelixFollow").default>;
    /**
     * Retrieves the follow data of the user to the given channel.
     *
     * @param channel
     */
    getFollowTo(channel: UserIdResolvable): Promise<import("./HelixFollow").default | null>;
    /**
     * Checks whether the user is following the given channel.
     *
     * @param channel The channel to check for the user's follow.
     */
    follows(channel: UserIdResolvable): Promise<boolean>;
    /**
     * Follows the channel.
     */
    follow(): Promise<import("../../User/UserFollow").default>;
    /**
     * Unfollows the channel.
     */
    unfollow(): Promise<void>;
}
