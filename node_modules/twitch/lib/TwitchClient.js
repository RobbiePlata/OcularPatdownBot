"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var request = require("request-promise-native");
var Decorators_1 = require("./Toolkit/Decorators");
var TokenInfo_1 = require("./API/TokenInfo");
var CheermoteList_1 = require("./API/Bits/CheermoteList");
var StaticAuthProvider_1 = require("./Auth/StaticAuthProvider");
var BitsAPI_1 = require("./API/Bits/BitsAPI");
var ChannelAPI_1 = require("./API/Channel/ChannelAPI");
var ChatAPI_1 = require("./API/Chat/ChatAPI");
var HelixAPIGroup_1 = require("./API/Helix/HelixAPIGroup");
var SearchAPI_1 = require("./API/Search/SearchAPI");
var StreamAPI_1 = require("./API/Stream/StreamAPI");
var UnsupportedAPI_1 = require("./API/Unsupported/UnsupportedAPI");
var UserAPI_1 = require("./API/User/UserAPI");
var AccessToken_1 = require("./API/AccessToken");
var RefreshableAuthProvider_1 = require("./Auth/RefreshableAuthProvider");
var ConfigError_1 = require("./Errors/ConfigError");
/**
 * The endpoint to call, i.e. /kraken, /helix or a custom (potentially unsupported) endpoint.
 */
var TwitchAPICallType;
(function (TwitchAPICallType) {
    /**
     * Call a Kraken API endpoint.
     */
    TwitchAPICallType[TwitchAPICallType["Kraken"] = 0] = "Kraken";
    /**
     * Call a Helix API endpoint.
     */
    TwitchAPICallType[TwitchAPICallType["Helix"] = 1] = "Helix";
    /**
     * Call a custom (potentially unsupported) endpoint.
     */
    TwitchAPICallType[TwitchAPICallType["Custom"] = 2] = "Custom";
})(TwitchAPICallType = exports.TwitchAPICallType || (exports.TwitchAPICallType = {}));
/**
 * The main entry point of this library. Manages API calls and the use of access tokens in these.
 */
var TwitchClient = /** @class */ (function () {
    /**
     * Creates a new Twitch client instance.
     *
     * @param config Configuration for the client instance.
     */
    function TwitchClient(config) {
        var authProvider = config.authProvider, restConfig = tslib_1.__rest(config, ["authProvider"]);
        if (!authProvider) {
            throw new ConfigError_1.default('No auth provider given');
        }
        this._config = tslib_1.__assign({ preAuth: false, initialScopes: [], cheermotes: {
                defaultBackground: CheermoteList_1.CheermoteBackground.dark,
                defaultState: CheermoteList_1.CheermoteState.animated,
                defaultScale: CheermoteList_1.CheermoteScale.x1
            }, authProvider: authProvider }, restConfig);
        if (this._config.preAuth) {
            // tslint:disable-next-line:no-floating-promises
            authProvider.getAccessToken(this._config.initialScopes || []);
        }
    }
    TwitchClient_1 = TwitchClient;
    /**
     * Creates a new instance with fixed credentials.
     *
     * @param clientId The client ID of your application.
     * @param accessToken The access token to call the API with.
     *
     * You need to obtain one using one of the [Twitch OAuth flows](https://dev.twitch.tv/docs/authentication/getting-tokens-oauth/).
     * @param refreshConfig Configuration to automatically refresh expired tokens.
     * @param config Additional configuration to pass to the constructor.
     *
     * Note that if you provide a custom authentication provider, this method will overwrite it. In this case, you should use the constructor directly.
     */
    TwitchClient.withCredentials = function (clientId, accessToken, refreshConfig, config) {
        if (config === void 0) { config = {}; }
        if (refreshConfig) {
            return new this(tslib_1.__assign({}, config, { authProvider: new RefreshableAuthProvider_1.default(new StaticAuthProvider_1.default(clientId, accessToken), refreshConfig) }));
        }
        else {
            return new this(tslib_1.__assign({}, config, { authProvider: new StaticAuthProvider_1.default(clientId, accessToken) }));
        }
    };
    /**
     * Retrieves information about your access token.
     */
    TwitchClient.prototype.getTokenInfo = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var data;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.callAPI({ url: '/' })];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, new TokenInfo_1.default(data.token)];
                }
            });
        });
    };
    /**
     * Retrieves information about an access token.
     *
     * @param clientId The client ID of your application.
     * @param accessToken The access token to get the information of.
     *
     * You need to obtain one using one of the [Twitch OAuth flows](https://dev.twitch.tv/docs/authentication/getting-tokens-oauth/).
     */
    TwitchClient.getTokenInfo = function (clientId, accessToken) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var data;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.callAPI({ url: '/' }, clientId, accessToken)];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, new TokenInfo_1.default(data.token)];
                }
            });
        });
    };
    /**
     * Retrieves an access token for the authentication provider.
     *
     * @param scope
     */
    TwitchClient.prototype.getAccessToken = function (scope) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, this._config.authProvider.getAccessToken(scope)];
            });
        });
    };
    /**
     * Makes a call to the Twitch API using your access token.
     *
     * @param options The configuration of the call.
     */
    // tslint:disable-next-line:no-any
    TwitchClient.prototype.callAPI = function (options) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var accessToken, e_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._config.authProvider.getAccessToken(options.scope ? [options.scope] : [])];
                    case 1:
                        accessToken = _a.sent();
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 8]);
                        return [4 /*yield*/, TwitchClient_1.callAPI(options, this._config.authProvider.clientId, accessToken)];
                    case 3: return [2 /*return*/, _a.sent()];
                    case 4:
                        e_1 = _a.sent();
                        if (!(e_1.response && e_1.response.status === 401 && this._config.authProvider instanceof RefreshableAuthProvider_1.default)) return [3 /*break*/, 7];
                        return [4 /*yield*/, this._config.authProvider.refresh()];
                    case 5:
                        _a.sent();
                        return [4 /*yield*/, this._config.authProvider.getAccessToken(options.scope ? [options.scope] : [])];
                    case 6:
                        accessToken = _a.sent();
                        return [2 /*return*/, TwitchClient_1.callAPI(options, this._config.authProvider.clientId, accessToken)];
                    case 7: throw e_1;
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    TwitchClient._getUrl = function (url, type) {
        type = type === undefined ? TwitchAPICallType.Kraken : type;
        switch (type) {
            case TwitchAPICallType.Kraken:
            case TwitchAPICallType.Helix:
                var typeName = type === TwitchAPICallType.Kraken ? 'kraken' : 'helix';
                return "https://api.twitch.tv/" + typeName + "/" + url.replace(/^\//, '');
            case TwitchAPICallType.Custom:
                return url;
            default:
                return url; // wat
        }
    };
    /**
     * Makes a call to the Twitch API using given credetials.
     *
     * @param options The configuration of the call.
     * @param clientId The client ID of your application.
     * @param accessToken The access token to call the API with.
     *
     * You need to obtain one using one of the [Twitch OAuth flows](https://dev.twitch.tv/docs/authentication/getting-tokens-oauth/).
     */
    // tslint:disable-next-line:no-any
    TwitchClient.callAPI = function (options, clientId, accessToken) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var requestOptions;
            return tslib_1.__generator(this, function (_a) {
                requestOptions = {
                    url: this._getUrl(options.url, options.type),
                    method: options.method,
                    headers: {
                        Accept: "application/vnd.twitchtv.v" + (options.version || 5) + "+json"
                    },
                    qs: options.query,
                    qsStringifyOptions: {
                        arrayFormat: 'repeat'
                    },
                    json: true,
                    gzip: true
                };
                if (options.body) {
                    requestOptions.form = options.body;
                }
                else if (options.jsonBody) {
                    requestOptions.body = options.jsonBody;
                }
                if (clientId) {
                    requestOptions.headers['Client-ID'] = clientId;
                }
                if (accessToken) {
                    requestOptions.headers.Authorization = (options.type === TwitchAPICallType.Helix ? 'Bearer' : 'OAuth') + " " + accessToken;
                }
                return [2 /*return*/, request(requestOptions)];
            });
        });
    };
    /**
     * Retrieves an access token with your client credentials and an authorization code.
     *
     * @param clientId The client ID of your application.
     * @param clientSecret The client secret of your application.
     * @param code The authorization code.
     * @param redirectUri The redirect URI. This serves no real purpose here, but must still match with the redirect URI you configured in the Twitch Developer dashboard.
     */
    TwitchClient.getAccessToken = function (clientId, clientSecret, code, redirectUri) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = AccessToken_1.default.bind;
                        return [4 /*yield*/, this.callAPI({
                                url: 'oauth2/token',
                                method: 'POST',
                                query: {
                                    grant_type: 'authorization_code',
                                    client_id: clientId,
                                    client_secret: clientSecret,
                                    code: code,
                                    redirect_uri: redirectUri
                                }
                            })];
                    case 1: return [2 /*return*/, new (_a.apply(AccessToken_1.default, [void 0, _b.sent()]))()];
                }
            });
        });
    };
    /**
     * Refreshes an expired access token with your client credentials and the refresh token that was given by the initial authentication.
     *
     * @param clientId The client ID of your application.
     * @param clientSecret The client secret of your application.
     * @param refreshToken The refresh token.
     */
    TwitchClient.refreshAccessToken = function (clientId, clientSecret, refreshToken) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = AccessToken_1.default.bind;
                        return [4 /*yield*/, this.callAPI({
                                url: 'oauth2/token',
                                method: 'POST',
                                query: {
                                    grant_type: 'refresh_token',
                                    client_id: clientId,
                                    client_secret: clientSecret,
                                    refresh_token: refreshToken
                                }
                            })];
                    case 1: return [2 /*return*/, new (_a.apply(AccessToken_1.default, [void 0, _b.sent()]))()];
                }
            });
        });
    };
    Object.defineProperty(TwitchClient.prototype, "bits", {
        /**
         * The API methods that deal with bits.
         */
        get: function () {
            return new BitsAPI_1.default(this);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TwitchClient.prototype, "channels", {
        /**
         * The API methods that deal with channels.
         */
        get: function () {
            return new ChannelAPI_1.default(this);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TwitchClient.prototype, "chat", {
        /**
         * The API methods that deal with chat.
         */
        get: function () {
            return new ChatAPI_1.default(this);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TwitchClient.prototype, "search", {
        /**
         * The API methods that deal with searching.
         */
        get: function () {
            return new SearchAPI_1.default(this);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TwitchClient.prototype, "streams", {
        /**
         * The API methods that deal with streams.
         */
        get: function () {
            return new StreamAPI_1.default(this);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TwitchClient.prototype, "users", {
        /**
         * The API methods that deal with users.
         */
        get: function () {
            return new UserAPI_1.default(this);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TwitchClient.prototype, "helix", {
        /**
         * A group of Helix API methods.
         */
        get: function () {
            return new HelixAPIGroup_1.default(this);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TwitchClient.prototype, "unsupported", {
        /**
         * Different API methods that are not officially supported by Twitch.
         */
        get: function () {
            return new UnsupportedAPI_1.default(this);
        },
        enumerable: true,
        configurable: true
    });
    var TwitchClient_1;
    tslib_1.__decorate([
        Decorators_1.CachedGetter()
    ], TwitchClient.prototype, "bits", null);
    tslib_1.__decorate([
        Decorators_1.CachedGetter()
    ], TwitchClient.prototype, "channels", null);
    tslib_1.__decorate([
        Decorators_1.CachedGetter()
    ], TwitchClient.prototype, "chat", null);
    tslib_1.__decorate([
        Decorators_1.CachedGetter()
    ], TwitchClient.prototype, "search", null);
    tslib_1.__decorate([
        Decorators_1.CachedGetter()
    ], TwitchClient.prototype, "streams", null);
    tslib_1.__decorate([
        Decorators_1.CachedGetter()
    ], TwitchClient.prototype, "users", null);
    tslib_1.__decorate([
        Decorators_1.CachedGetter()
    ], TwitchClient.prototype, "helix", null);
    tslib_1.__decorate([
        Decorators_1.CachedGetter()
    ], TwitchClient.prototype, "unsupported", null);
    TwitchClient = TwitchClient_1 = tslib_1.__decorate([
        Decorators_1.Cacheable
    ], TwitchClient);
    return TwitchClient;
}());
exports.default = TwitchClient;
//# sourceMappingURL=TwitchClient.js.map